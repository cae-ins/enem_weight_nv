### check also the total and consistency withth eother sets of constraints
# sum(tmpKT3[,list_of_X ])
######################################################################################################
######################################################################################################
######################################################################################################
###
###   STEP 3.16 - LOAD THE INPUT DATAFRAME CONTAINING THE POPULATION FIGURES FROM FOLDER 560
###
###              BY REGION, URBAN AND RURAL, SEX AND 7 AGE GROUPS
###
######################################################################################################
### Create the dataframe with the population by region, month sex and age_group7
# tmpKT4 <- POP_LFS_BY_DISTRICT_URRU_SEX_7AGEGRvert
#
# head(tmpKT4 )
######################################################################################################
###
###   STEP 3.17 - CREATE THE VARIABLE "DOMAIN" THAT IDENTIFIES THE DOMAIN OF ESTIMATION
###
######################################################################################################
# tmpKT4$DOMAIN <- as.character(tmpKT4$REGION)
######################################################################################################
###
###   STEP 3.18 - CALCULATE THE SET OF VARIABLES X95 TO X136 (containing the population figures by month)
###
######################################################################################################
###    Create the X variables and initialize them to 0
# tmpKT4 <- cbind( tmpKT4 , data.frame(matrix(0 , nrow = nrow(tmpKT4), ncol =  136, byrow = FALSE)))
### Create a list of the 42 Xs from X25 TO X52 to retain and to be used in the next steps (useful when we have a huge number of X)
# list_of_X  <- paste(rep("X",42),seq(95,136),sep="")
# list_of_X
###  MALES IN THE FIRST MONTH OF ALL REGIONS by 7 AGE GROUPS
# tmpKT4$X95  <- ifelse( tmpKT4$AGE_GROUP7 == 1 & tmpKT4$SEX==1   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X96  <- ifelse( tmpKT4$AGE_GROUP7 == 2 & tmpKT4$SEX==1   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X97  <- ifelse( tmpKT4$AGE_GROUP7 == 3 & tmpKT4$SEX==1   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X98  <- ifelse( tmpKT4$AGE_GROUP7 == 4 & tmpKT4$SEX==1   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X99  <- ifelse( tmpKT4$AGE_GROUP7 == 5 & tmpKT4$SEX==1   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X100 <- ifelse( tmpKT4$AGE_GROUP7 == 6 & tmpKT4$SEX==1   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X101 <- ifelse( tmpKT4$AGE_GROUP7 == 7 & tmpKT4$SEX==1   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
###  FEMALES IN THE FIRST MONTH OF ALL REGIONS by 7 AGE GROUPS
# tmpKT4$X102 <- ifelse( tmpKT4$AGE_GROUP7 == 1 & tmpKT4$SEX==2   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X103 <- ifelse( tmpKT4$AGE_GROUP7 == 2 & tmpKT4$SEX==2   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X104 <- ifelse( tmpKT4$AGE_GROUP7 == 3 & tmpKT4$SEX==2   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X105 <- ifelse( tmpKT4$AGE_GROUP7 == 4 & tmpKT4$SEX==2   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X106 <- ifelse( tmpKT4$AGE_GROUP7 == 5 & tmpKT4$SEX==2   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X107 <- ifelse( tmpKT4$AGE_GROUP7 == 6 & tmpKT4$SEX==2   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X108 <- ifelse( tmpKT4$AGE_GROUP7 == 7 & tmpKT4$SEX==2   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
### LET'S CHECK IF THAT WORKED
# tmp_check <- aggregate(  x = tmpKT4[, list_of_X],
#                          by = list(DOMAIN = tmpKT4$DOMAIN),
#                          FUN = sum)
#  View(tmp_check)
###  MALES IN THE SECOND MONTH OF ALL REGIONS by 7 AGE GROUPS
# tmpKT4$X109 <- ifelse( tmpKT4$AGE_GROUP7 == 1 & tmpKT4$SEX==1   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X110 <- ifelse( tmpKT4$AGE_GROUP7 == 2 & tmpKT4$SEX==1   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X111 <- ifelse( tmpKT4$AGE_GROUP7 == 3 & tmpKT4$SEX==1   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X112 <- ifelse( tmpKT4$AGE_GROUP7 == 4 & tmpKT4$SEX==1   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X113 <- ifelse( tmpKT4$AGE_GROUP7 == 5 & tmpKT4$SEX==1   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X114 <- ifelse( tmpKT4$AGE_GROUP7 == 6 & tmpKT4$SEX==1   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X115 <- ifelse( tmpKT4$AGE_GROUP7 == 7 & tmpKT4$SEX==1   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
###  FEMALES IN THE SECOND MONTH OF ALL REGIONS by 7 AGE GROUPS
# tmpKT4$X116 <- ifelse( tmpKT4$AGE_GROUP7 == 1 & tmpKT4$SEX==2   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X117 <- ifelse( tmpKT4$AGE_GROUP7 == 2 & tmpKT4$SEX==2   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X118 <- ifelse( tmpKT4$AGE_GROUP7 == 3 & tmpKT4$SEX==2   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X119 <- ifelse( tmpKT4$AGE_GROUP7 == 4 & tmpKT4$SEX==2   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X120 <- ifelse( tmpKT4$AGE_GROUP7 == 5 & tmpKT4$SEX==2   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X121 <- ifelse( tmpKT4$AGE_GROUP7 == 6 & tmpKT4$SEX==2   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X122 <- ifelse( tmpKT4$AGE_GROUP7 == 7 & tmpKT4$SEX==2   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
### LET'S CHECK IF THAT WORKED
# tmp_check <- aggregate(  x = tmpKT4[, list_of_X],
#                          by = list(DOMAIN = tmpKT4$DOMAIN),
#                          FUN = sum)
#  View(tmp_check)
###  MALES IN THE FIRST MONTH OF ALL REGIONS by 7 AGE GROUPS
# tmpKT4$X123 <- ifelse( tmpKT4$AGE_GROUP7 == 1 & tmpKT4$SEX==1   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X124 <- ifelse( tmpKT4$AGE_GROUP7 == 2 & tmpKT4$SEX==1   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X125 <- ifelse( tmpKT4$AGE_GROUP7 == 3 & tmpKT4$SEX==1   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X126 <- ifelse( tmpKT4$AGE_GROUP7 == 4 & tmpKT4$SEX==1   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X127 <- ifelse( tmpKT4$AGE_GROUP7 == 5 & tmpKT4$SEX==1   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X128 <- ifelse( tmpKT4$AGE_GROUP7 == 6 & tmpKT4$SEX==1   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X129 <- ifelse( tmpKT4$AGE_GROUP7 == 7 & tmpKT4$SEX==1   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
###  FEMALES IN THE FIRST MONTH OF ALL REGIONS by 7 AGE GROUPS
# tmpKT4$X130 <- ifelse( tmpKT4$AGE_GROUP7 == 1 & tmpKT4$SEX==2   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X131 <- ifelse( tmpKT4$AGE_GROUP7 == 2 & tmpKT4$SEX==2   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X132 <- ifelse( tmpKT4$AGE_GROUP7 == 3 & tmpKT4$SEX==2   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X133 <- ifelse( tmpKT4$AGE_GROUP7 == 4 & tmpKT4$SEX==2   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X134 <- ifelse( tmpKT4$AGE_GROUP7 == 5 & tmpKT4$SEX==2   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X135 <- ifelse( tmpKT4$AGE_GROUP7 == 6 & tmpKT4$SEX==2   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
# tmpKT4$X136 <- ifelse( tmpKT4$AGE_GROUP7 == 7 & tmpKT4$SEX==2   ,  tmpKT4$POPULATION_FIGURES / 3 , 0)
#
#
# tmpKT4 <- aggregate(   x = tmpKT4[, list_of_X],
#                        by = list(DOMAIN = tmpKT4$DOMAIN),
#                        FUN = sum)
#  View(tmpKT4)
### check also the total and consistency withth eother sets of constraints
# sum(tmpKT4[,list_of_X ])
######################################################################################################
###
###   STEP 3.6 - SUMMARIZE BY DOMAIN TO SAVE IN A DATAFRAME THE KNOWN TOTALS FOR EACH X
###
######################################################################################################
tmpKT$DOMAIN <- as.character(1)
LFS_KNOWN_TOTALS <- aggregate(tmpKT[, list_of_X], by = list(DOMAIN = tmpKT$DOMAIN), FUN = sum)
######################################################################################################
###
###   STEP 3.13 - CREATE THE R DATAFRAME WITH THE KNOWN TOTALS THAT ARE USED AS SECOND INPUT BY REGENESEES
###
######################################################################################################
### If we have set the working directory for the outputs we can use
save( LFS_KNOWN_TOTALS , file = FILE_LFS_KNOWN_TOTALS_RDATA )
######################################################################################################
###
###   STEP 3.14 - CHECK TOTAL POPULATION FIGURES
###
######################################################################################################
###   We can calculate the total population summing the X values of the first subset of X
###   notice that X1 is the second column in the dataframe, hence X48 is the 49th column
sum(LFS_KNOWN_TOTALS[,seq(2,49)])
###   We can calculate the total population summing the X values of the second subset of X
sum(LFS_KNOWN_TOTALS[,seq(50,61)]) # ABIDJAN
###   We can calculate the total population summing the X values of the third subset of X
# sum(LFS_KNOWN_TOTALS[,seq(54,95)])
###   We can calculate the total population summing the X values of the fourth subset of X
# sum(LFS_KNOWN_TOTALS[,seq(96,137)])
######################################################################################################
###
###   STEP 3.15 - CREATE A TABLE FOR REPORTING WITH ROWS AND COLUMNS TOTALS TO EXPORT IN AN EXCEL FILE
###
######################################################################################################
###   Save the results in an excel file
# write_xlsx(LFS_KNOWN_TOTALS, "LFS_KNOWN_TOTALS_2021_Q1_94X_4D_ALLWR_np.xlsx" )
write_xlsx(LFS_KNOWN_TOTALS, FILE_LFS_KNOWN_TOTALS_XLSX )
View(LFS_KNOWN_TOTALS)
getwd()
getwd()
setwd(dir_data_QW)
getwd()
######################################################################################################
###
###   STEP 4.2 - LOAD THE R OBJECTS CONTAINING SAMPLE DATA AND KNOWN TOTAL FROM THE WORKING DIRECTORY
###              (not necessary if we have produced them in the same R session)
###
######################################################################################################
load( FILE_LFS_SAMPLE_DATA_RDATA )
str(LFS_SAMPLE_DATA)
load( FILE_LFS_KNOWN_TOTALS_RDATA )
str(LFS_KNOWN_TOTALS)
library("ReGenesees")
library("summarytools")
library("writexl")
###   lists the objects in memory in the currect session
ls()
###   show the manuals of the package (when needed)
# help(ReGenesees)
######################################################################################################
###
###   STEP 4.6 -  Read the input SAMPLE_DATA that has been created with the R scripts "02_......R"
###
######################################################################################################
sample_data <-  	LFS_SAMPLE_DATA
###   transform some variables as factor as required by the routines used later
sample_data$DOMAIN    <- as.factor(sample_data$DOMAIN)
sample_data$STRATAKEY <- as.factor(sample_data$STRATAKEY)
sample_data$PSUKEY    <- as.factor(sample_data$PSUKEY)
sample_data$HHKEY     <- as.factor(sample_data$HHKEY)
sample_data$INDKEY    <- as.factor(sample_data$INDKEY)
###   add a variable with "ones" that will be used later to calculate summary statistics on the weighting
sample_data$ONES      <- 1
###  show the entire dataset
View(sample_data)
sum(sample_data$poids_menage)
######################################################################################################
###
###   STEP 4.7 -  Read the known totals that has been created with the R scripts "03_......R"
###
######################################################################################################
known_totals <-  	LFS_KNOWN_TOTALS
###  transform some vairables as factor as required by the routines used later
known_totals$DOMAIN <- as.factor(known_totals$DOMAIN)
known_totals
###  Check the total of the known total population
###  Calculates the sum of the X by rows (the total for each domain) and then adds over the domains to get the total for the country
sum(rowSums( known_totals[, seq(2,49) ] ))
design_lfs  <- e.svydesign(data = sample_data,
ids = ~ PSUKEY + HHKEY,
strata = ~ STRATAKEY,
weights = ~ poids_menage,
fpc = NULL,
self.rep.str = NULL,
check.data = TRUE)
###  check if there is any lonely PSU in a STRATA (if that is the case need to ne collapsed)
###  if everything is we will get the message "#No lonely PSUs found!"
find.lon.strata(design_lfs)
######################################################################################################
###
###   STEP 4.9
###
###   CREATE THE MODEL FOR THE SET OF CONSTRAINTS (NUMBER OF X USED)
###
###  Use the function "constraints_model" to create the list of Xs identifying the calibration cells
###  The function "constraints_model" has been developed by Alessandro Martini,
###  Statistician at the Italian National Institute of Statistics (email alessandro.martini@istat.it)
###
###  The function is not part of the package and must be uploaded from file below
###
#################################################################################################################
### We shoudl wirte the calibration constraints in the following way. However we can used the function
### illustrated below
# constrains_x <- ~X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X11 + X12 +
#  X13 + X14 + X15 + X16 + X17 + X18 + X19 + X20 + X21 + X22 +
#  X23 + X24 + (..... up to) + X136 - 1
### install new functions for ReGenesees from the following file
source( R_SCRIPT_NEW_FUNCTIONS_FOR_X_CONSTRAINS )
###  use the function "constraints_model" to create the list of Xs identifying the calibration cells (Calibration model)
#constrains_x <- constraints_model(136)
constrains_x <- constraints_model(xnum)
###  Shows the calibration cells Xs
constrains_x
######################################################################################################
###
###   STEP 4.10
###
###   FILL IN THE POPULATION DATA IN A SPECIFIC DATAFRAME REQUIRED BY THE PROCEDURE.
###   ALSO CHECK THAT THE SAMPLE DATA AND POPULATION CONSTRAINTS ARE CONSISTENT
###
###################################################################################################################
### If everything is ok we will get the message "# Coherence check between 'universe' and 'template': OK"
poptemplate  <-  pop.template(data= known_totals, calmodel= constrains_x, partition = ~ DOMAIN )
popdataframe <-  fill.template(universe= known_totals, template= poptemplate, mem.frac= 5)
popdataframe
###  Check the total of the known total population
sum(rowSums( popdataframe[, seq(2,49) ] ))
######################################################################################################
###
###   STEP 4.12
###
###   SUGGEST THE BOUNDS TO BE USED FOR A RANGE RESTRICTED CALIBRATION:
###
#####################################################################################################################
bounds.h <-bounds.hint( design = design_lfs,
df.population = popdataframe,
calmodel = constrains_x,
partition = ~ DOMAIN )
bounds.h
calib_lfs   <-  e.calibrate(design = design_lfs,
df.population = popdataframe,
calmodel = constrains_x,
partition = ~ DOMAIN ,
calfun = "logit",
#bounds = bounds.h , # La borne suggerée est négative
bounds = c(0.181, 4),
aggregate.stage = NULL,
maxit = 50,
epsilon = 1e-06,
force = TRUE)
###   Check convergence of calibration: all the "$return.codes" for all DOMAINS from "ecal.status" must always be zero
###   If one or more codes are different from 0 the procedure did not converge and the final weights are not correctly calculated
###   and the constraints/benchmarks (the set of X) or the DOMAINS need to be revised
ecal.status
###   Check that the sum of the final weights is equal to the population benchmarks
sum(weights(calib_lfs))
summary(weights(calib_lfs))
###   Read the message about convergence
check.cal(calib_lfs)
###   Read the message about strata and clusters
calib_lfs
sample_data$FINAL_WEIGHT <- weights(calib_lfs)
###   Calculate the final correction factors
sample_data$FINAL_CORR_FACTOR <- sample_data$FINAL_WEIGHT / sample_data$poids_menage
View(sample_data)
#######   STEP 16   ###########################################################################################
###
###    SAVE THE WEIGHTS IN A NEW R OBJECT THAT WILL BE USED FOR NEXT STEPS
###
###############################################################################################################
LFS_CALIBRATION_FINAL_WEIGHTS <- sample_data
head(LFS_CALIBRATION_FINAL_WEIGHTS)
###    Saver the R object on disk
save(LFS_CALIBRATION_FINAL_WEIGHTS, file=FILE_LFS_CALIBRATION_FINAL_WEIGHTS_RDATA)
######################################################################################################
###
###    STEP 4.16
###
###   PRODUCE SUMMARY STATISTICS FOR FINAL WEIGHTS AND CORRECTION FACTORS BY STRATA
###   AND EXPORT TO A CSV OR XLS FILE
###
###############################################################################################################
### SUMMARY OF DESIGN WEIGHTS
LFS_CALIBRATION_SUMMARY_OF_DESIGN_WEIGHTS <-
aggregate(  x = list( DESIGN_WEIGHT = LFS_CALIBRATION_FINAL_WEIGHTS$poids_menage) ,
by = list( STRATA = LFS_CALIBRATION_FINAL_WEIGHTS$STRATA),
FUN = summary )
View(LFS_CALIBRATION_SUMMARY_OF_DESIGN_WEIGHTS)
save(LFS_CALIBRATION_SUMMARY_OF_DESIGN_WEIGHTS, file = FILE_LFS_CALIBRATION_SUMMARY_OF_DESIGN_WEIGHTS_RDATA)
write.csv(LFS_CALIBRATION_SUMMARY_OF_DESIGN_WEIGHTS, file = FILE_LFS_CALIBRATION_SUMMARY_OF_DESIGN_WEIGHTS_CSV)
### SUMMARY OF CORRECTION FACTORS
LFS_CALIBRATION_SUMMARY_OF_FINAL_CORR_FACTORS <-
aggregate(  x = list( FINAL_CORR_FACTOR = LFS_CALIBRATION_FINAL_WEIGHTS$FINAL_CORR_FACTOR ) ,
by = list( STRATA = LFS_CALIBRATION_FINAL_WEIGHTS$STRATA),
FUN = summary )
View(LFS_CALIBRATION_SUMMARY_OF_FINAL_CORR_FACTORS)
save(LFS_CALIBRATION_SUMMARY_OF_FINAL_CORR_FACTORS, file = FILE_LFS_CALIBRATION_SUMMARY_OF_FINAL_CORR_FACTORS_RDATA)
write.csv(LFS_CALIBRATION_SUMMARY_OF_FINAL_CORR_FACTORS, file = FILE_LFS_CALIBRATION_SUMMARY_OF_FINAL_CORR_FACTORS_CSV)
### SUMMARY OF FINAL WEIGHTS
LFS_CALIBRATION_SUMMARY_OF_FINAL_WEIGHTS <-
aggregate(  x = list( FINAL_WEIGHT = LFS_CALIBRATION_FINAL_WEIGHTS$FINAL_WEIGHT ) ,
by = list( STRATA = LFS_CALIBRATION_FINAL_WEIGHTS$STRATA),
FUN = summary )
View(LFS_CALIBRATION_SUMMARY_OF_FINAL_WEIGHTS)
save(LFS_CALIBRATION_SUMMARY_OF_FINAL_WEIGHTS, file=FILE_LFS_CALIBRATION_SUMMARY_OF_FINAL_WEIGHTS_RDATA)
write.csv(LFS_CALIBRATION_SUMMARY_OF_FINAL_WEIGHTS, file=FILE_LFS_CALIBRATION_SUMMARY_OF_FINAL_WEIGHTS_CSV)
getwd()
setwd(dir_data_QW)
getwd()
load( FILE_LFS_ILO_DER_RDATA )
head(LFS_ILO_DER)
### Load the dataframe with the final weights
load( FILE_LFS_CALIBRATION_FINAL_WEIGHTS_RDATA )
head(LFS_CALIBRATION_FINAL_WEIGHTS )
tmp_FINAL_WEIGHTS <- LFS_CALIBRATION_FINAL_WEIGHTS[, c("INDKEY", "FINAL_CORR_FACTOR", "FINAL_WEIGHT")]
head(tmp_FINAL_WEIGHTS)
### verify the dimension of the two dataframes (must have the same number of rows)
dim(LFS_ILO_DER)
dim(tmp_FINAL_WEIGHTS)
### merge the two datasets by "INDKEY" (the unique identifiers of the individual respondents)
LFS_ILO_CAL <- merge( LFS_ILO_DER, tmp_FINAL_WEIGHTS, by = "INDKEY")
### verify the content and the dimension of the resulting "CAL" dataframe
dim(LFS_ILO_CAL)
str(LFS_ILO_CAL)
save(LFS_ILO_CAL, file = FILE_LFS_ILO_CAL_RDATA )
######################################################################################################
###
###   STEP 5.5
###
###    SAVE AN IMAGE OF ALL THE R OBJECTS CREATED IN THIS PHASE (CAN BE REUSED LATER FOR OTHER TASKS)
###
##############################################################################################################
save.image( FILE_LFS_CALIBRATION_IMAGE_RDATA )
# load(FILE_LFS_CALIBRATION_IMAGE_RDATA)
######################################################################################################
###
###   STEP 5.5
###
###   CHECK FINAL ESTIMATES
###
##############################################################################################################
### We can compare the estimates obtained using the design weights and final weights
### Create a table using the "expss" package and the magritte %>% pipe
### (see https://magrittr.tidyverse.org/reference/pipe.html)
library("expss")
load( FILE_LFS_ILO_CAL_RDATA)
str(LFS_ILO_CAL)
########################################################################################################################.
########################################################################################################################.
########################################################################################################################.
########                                                                                                        ########.
########           TRAINING ON STRATEGIES TO CALCULATE LFS SAMPLE WEIGHTS USING CALIBRATIONS                    ########.
########                                                                                                        ########.
########          PREPARED BY: ANTONIO R. DISCENZA - ILO DEPARTMENT OF STATISTICS - SSMU UNIT                   ########.
########                                    E.mail: discenza@ilo.org                                            ########.
########                                                                                                        ########.
########                                 CASE STUDY N. 6 - (444X_1D_ALLWR)                                      ########.
########                       CALIBRATION OF FINAL WEIGHTS USING R FOR ALL STEPS                               ########.
########                                                                                                        ########.
########        Version B:  Filenames, paths, reference periods and set of constraints are parameterized        ########.
########                                                                                                        ########.
########                                                                                                        ########.
########                                        R Script 05                                                     ########.
########                                                                                                        ########.
########                         PROGRAM TO ATTACH FINAL WEIGHTS AND CORRECTION FACTORS                         ########.
########                          TO THE FULL SAMPLE "DER" TO CREATE THE DATASET "CAL"                          ########.
########                                                                                                        ########.
########        1 DOMAINS  (33 Regions)                                                                         ########.
########        444 CONSTRAINTS (X1 TO X444)                                                                    ########.
########              - Population by sex and urban and rural and 12 age groups    (X1 TO X48)                  ########.
########              - Population by region, urban and rural, sex and 3 age groups  (X49 TO X444)              ########.
########                                                                                                        ########.
########################################################################################################################.
########################################################################################################################.
######################################################################################################
###
###   STEP 5.1
###
###   SET THE WORKING DIRECTORY WHERE THE OUPUTS WILL BE STORED
###
######################################################################################################
getwd()
setwd(dir_data_QW)
getwd()
######################################################################################################
###
###   STEP 5.2
###
###   Load the R objects from the specific folder (not necessary if we have produced them in the same R session)
###
##############################################################################################################
### Load the full sample dataframe "DER"
load( FILE_LFS_ILO_DER_RDATA )
head(LFS_ILO_DER)
### Load the dataframe with the final weights
load( FILE_LFS_CALIBRATION_FINAL_WEIGHTS_RDATA )
head(LFS_CALIBRATION_FINAL_WEIGHTS )
######################################################################################################
###
###   STEP 5.3
###
###   Merge the final weights to the full sample "DER" and create the new dataframe "CAL"
###
##############################################################################################################
### select the variables to be merged with the full sample
tmp_FINAL_WEIGHTS <- LFS_CALIBRATION_FINAL_WEIGHTS[, c("INDKEY", "FINAL_CORR_FACTOR", "FINAL_WEIGHT")]
head(tmp_FINAL_WEIGHTS)
### verify the dimension of the two dataframes (must have the same number of rows)
dim(LFS_ILO_DER)
dim(tmp_FINAL_WEIGHTS)
### merge the two datasets by "INDKEY" (the unique identifiers of the individual respondents)
LFS_ILO_CAL <- merge( LFS_ILO_DER, tmp_FINAL_WEIGHTS, by = "INDKEY")
### verify the content and the dimension of the resulting "CAL" dataframe
dim(LFS_ILO_CAL)
str(LFS_ILO_CAL)
######################################################################################################
###
###   STEP 5.4
###
###   SAVE THE R DATAFRAME WITH THE FINAL WEIGHTS ON DISK
###
##############################################################################################################
save(LFS_ILO_CAL, file = FILE_LFS_ILO_CAL_RDATA )
######################################################################################################
###
###   STEP 5.5
###
###    SAVE AN IMAGE OF ALL THE R OBJECTS CREATED IN THIS PHASE (CAN BE REUSED LATER FOR OTHER TASKS)
###
##############################################################################################################
save.image( FILE_LFS_CALIBRATION_IMAGE_RDATA )
# load(FILE_LFS_CALIBRATION_IMAGE_RDATA)
######################################################################################################
###
###   STEP 5.5
###
###   CHECK FINAL ESTIMATES
###
##############################################################################################################
### We can compare the estimates obtained using the design weights and final weights
### Create a table using the "expss" package and the magritte %>% pipe
### (see https://magrittr.tidyverse.org/reference/pipe.html)
library("expss")
load( FILE_LFS_ILO_CAL_RDATA)
str(LFS_ILO_CAL)
### calculate ilo status using design weights
LFS_ILO_CAL %>%
tab_cols(ilo_lfs , total()) %>%
tab_rows(HH2, total()) %>%
tab_weight(DESIGN_WEIGHT) %>%
tab_stat_sum %>%
tab_pivot()
LFS_ILO_CAL %>%
# tab_cols(ilo_lfs , total()) %>%
tab_rows(HH2, total()) %>%
tab_weight(DESIGN_WEIGHT) %>%
tab_stat_sum %>%
tab_pivot()
LFS_ILO_CAL %>%
# tab_cols(ilo_lfs , total()) %>%
tab_rows(HH2, total()) %>%
tab_weight(poids_menage) %>%
tab_stat_sum %>%
tab_pivot()
### calculate ilo status using final weights
LFS_ILO_CAL %>%
tab_cols(ilo_lfs , total()) %>%
tab_rows(HH2, total()) %>%
tab_weight(FINAL_WEIGHT) %>%
tab_stat_sum %>%
tab_pivot()
LFS_ILO_CAL %>%
# tab_cols(ilo_lfs , total()) %>%
tab_rows(HH2, total()) %>%
tab_weight(poids_menage) %>%
tab_stat_sum %>%
tab_pivot()
### calculate ilo status using final weights
LFS_ILO_CAL %>%
# tab_cols(ilo_lfs , total()) %>%
tab_rows(HH2, total()) %>%
tab_weight(FINAL_WEIGHT) %>%
tab_stat_sum %>%
tab_pivot()
######################################################################################################
###
###   STEP 5.6
###
###   LET'S TRY TO COMPARE QUaRTERLY AND MONTHLY ESTIMATES OF ILO labour status
###
##############################################################################################################
# LFS_ILO_CAL$FINAL_MONTHLY_WEIGHT <- LFS_ILO_CAL$FINAL_WEIGHT * 3
###   QUARTERLY ESTIMATE
# LFS_ILO_CAL %>%
#   tab_cols(ilo_lfs , total()) %>%
#   tab_rows(QUARTER) %>%
#   tab_weight(FINAL_WEIGHT) %>%
#   tab_stat_sum %>%
#   tab_pivot()
###   MONTHLY ESTIMATES
# LFS_ILO_CAL %>%
#   tab_cols(ilo_lfs , total()) %>%
#   tab_rows(MONTH) %>%
#   tab_weight(FINAL_MONTHLY_WEIGHT) %>%
#   tab_stat_sum %>%
#   tab_pivot()
